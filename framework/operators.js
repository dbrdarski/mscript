import { flat, conditional } from './helpers';

export const operators = {
  '+': flat.bind((x, y) => x + y),
  '-': flat.bind((x, y) => x - y),
  '*': flat.bind((x, y) => x * y),
  '/': flat.bind((x, y) => x / y),
  '**': flat.bind((x, y) => x ** y),
  '%': flat.bind((x, y) => x % y),
  '<': flat.bind((x, y) => x < y),
  '>': flat.bind((x, y) => x > y),
  '<=': flat.bind((x, y) => x <= y),
  '>=': flat.bind((x, y) => x >= y),
  '==': flat.bind((x, y) => x == y),
  '===': flat.bind((x, y) => x === y),
  '!=': flat.bind((x, y) => x != y),
  '!==': flat.bind((x, y) => x !== y),
  '!': flat.bind((x) => !x),
  '?': conditional.bind((x, y, z) => x ? y : z),
  '&&': conditional.bind((x, y) => x && y),
  '||': conditional.bind((x, y) => x || y),
  'in': flat.bind((x, y) => x in y),
  '&': flat.bind((x, y) => x & y),
  '|': flat.bind((x, y) => x | y),
  '~': flat.bind((x) => ~ x),
  '^': flat.bind((x, y) => x ^ y),
  '<<': flat.bind((x, y) => x << y),
  '>>': flat.bind((x, y) => x >> y),
  '>>>': flat.bind((x, y) => x >>> y),
  'typeof': flat.bind((x) => typeof x),
  'void': flat.bind(() => void 0),
  'instanceof': flat.bind((x, y) => x instanceof y)
};
